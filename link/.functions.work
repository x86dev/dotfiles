#!/bin/sh

. "$HOME/.functions"

__vbx_env()
{
    if [ "$#" -ge 1 ]; then
        MY_VBOX_BRANCH=${1}
    fi
    if [ -z "$MY_VBOX_BRANCH" ]; then
        MY_VBOX_BRANCH="trunk"
    fi

    if [ "$#" -ge 2 ]; then
        MY_VBOX_TYPE=${2}
    fi
    if [ -z "$MY_VBOX_TYPE" ]; then
        MY_VBOX_TYPE="debug"
    fi

    echo "Using VBox $MY_VBOX_BRANCH ($MY_VBOX_TYPE for $MY_OS)"

    if [ -z "$MY_VBOX_PATH_HOME" ]; then
        case "$MY_OS" in
            win)
                MY_VBOX_PATH_HOME=/mnt/v/VBox
                ;;
            *)
                MY_VBOX_PATH_HOME=${HOME}/vbox
                ;;
        esac
    fi

    if [ ! -d "$MY_VBOX_PATH_HOME" ]; then
        echo "Error: VBox home directory '$MY_VBOX_PATH_HOME' does not exist."
        exit 1
    fi
    echo "VBox home path is: $MY_VBOX_PATH_HOME"

    MY_VBOX_PATH_ROOT=${MY_VBOX_PATH_HOME}/${MY_VBOX_BRANCH}

    if [ ! -d "$MY_VBOX_PATH_ROOT" ]; then
        echo "Error: VBox root directory '$MY_VBOX_PATH_ROOT' does not exist."
        exit 1
    fi
    echo "VBox root is at: $MY_VBOX_PATH_ROOT"

    if [ -z "$MY_VBOX_TARGET_ARCH" ]; then
        ## @todo Detect via $(uname -m)?
        MY_VBOX_TARGET_ARCH=amd64
    fi

    case "$MY_OS" in
        linux)
            MY_VBOX_TARGET_OS=linux
            MY_VBOX_PATH_OUT=${MY_VBOX_PATH_ROOT}/out/${MY_VBOX_TARGET_OS}.${MY_VBOX_TARGET_ARCH}/${MY_VBOX_TYPE}/bin/
            MY_VBOX_KMK=kmk
            if [ -z "$VBOX_USER_HOME" ]; then
                VBOX_USER_HOME=${HOME}/.config/VirtualBox
            fi
            ;;
        Darwin)
            MY_VBOX_TARGET_OS=darwin
            MY_VBOX_PATH_OUT=${MY_VBOX_PATH_ROOT}/out/${MY_VBOX_TARGET_OS}.${MY_VBOX_TARGET_ARCH}/${MY_VBOX_TYPE}/dist/VirtualBox.app/Contents/MacOS/
            MY_VBOX_KMK=kmk
            ;;
        win)
            MY_VBOX_TARGET_OS=win
            MY_VBOX_PATH_OUT=${MY_VBOX_PATH_ROOT}/out/${MY_VBOX_TARGET_OS}.${MY_VBOX_TARGET_ARCH}/${MY_VBOX_TYPE}/bin/
            MY_VBOX_KMK=${MY_VBOX_PATH_ROOT}/kBuild/bin/${MY_VBOX_TARGET_OS}.${MY_VBOX_TARGET_ARCH}/kmk.exe
            MY_WIN_SYSTEM32=/mnt/c/Windows/System32
            MY_WIN_CMD_EXE=${MY_WIN_SYSTEM32}/cmd.exe

            export KBUILD_PATH=${MY_VBOX_PATH_ROOT}/kBuild
            export KBUILD_DEVTOOLS_HST=${MY_VBOX_PATH_ROOT}/tools
            export PATH_DEVTOOLS=${MY_VBOX_PATH_ROOT}/tools
            ;;
        *)
            MY_VBOX_TARGET_OS=unknown
            ;;
    esac

    if [ -z "$VBOX_USER_HOME" ]; then
        echo "Error: VBox user home directory (VBOX_USER_HOME) not set."
        exit 1
    fi
    if [ ! -d "$VBOX_USER_HOME" ]; then
        echo "Error: VBox user home directory '$VBOX_USER_HOME' does not exist."
        exit 1
    fi
    echo "VBox user home is: $VBOX_USER_HOME"
    export VBOX_USER_HOME

    if [ "$MY_VBOX_BRANCH" = "5.2" ]; then
        MY_VBOX_VM_FRONTEND=VirtualBox
    else
        # Starting at 6.0 the frontend has a different image name.
        MY_VBOX_VM_FRONTEND=VirtualBoxVM
    fi
    export MY_VBOX_VM_FRONTEND

    export MY_VBOX_BRANCH=${MY_VBOX_BRANCH}
    export MY_VBOX_TYPE=${MY_VBOX_TYPE}
    export MY_VBOX_PATH_HOME=${MY_VBOX_PATH_HOME}
    export MY_VBOX_PATH_ROOT=${MY_VBOX_PATH_ROOT}
    export MY_VBOX_PATH_OUT=${MY_VBOX_PATH_OUT}
    export MY_VBOX_TARGET_ARCH=${MY_VBOX_TARGET_ARCH}
    export MY_VBOX_TARGET_OS=${MY_VBOX_TARGET_OS}
}

__vbx_env_current()
{
    __vbx_env "$MY_VBOX_BRANCH" "$MY_VBOX_TYPE"
}

__vbx_kill()
{
    echo "Killing VBox ..."

    if [ "$MY_VBOX_TARGET_OS" = "darwin" ]; then
        MY_PKILL_OPTS=""
    else
        MY_PKILL_OPTS="-e"
    fi


    pkill ${MY_PKILL_OPTS} VirtualBox
    pkill ${MY_PKILL_OPTS} VirtualBoxVM
    pkill ${MY_PKILL_OPTS} VBoxSVC
    pkill ${MY_PKILL_OPTS} VBoxXPCOMIPCD

    case "$MY_VBOX_TARGET_OS" in
        win)
            pkill ${MY_PKILL_OPTS} VBoxSDS
            ;;
        *)
            ;;
    esac
}

__vbx_drv_install()
{
    cd ${MY_VBOX_PATH_ROOT}/out/${MY_VBOX_TARGET_OS}.${MY_VBOX_TARGET_ARCH}/release/bin/

    case "$MY_VBOX_TARGET_OS" in
    linux)
        ;;
    darwin)
        ;;
    win)
        ./SUPInstall.exe
        ## @todo Add more.
        ;;
    *)
        ;;
    esac
}

__vbx_drv_uninstall()
{
    cd ${MY_VBOX_PATH_ROOT}/out/${MY_VBOX_TARGET_OS}.${MY_VBOX_TARGET_ARCH}/release/bin/

    case "$MY_VBOX_TARGET_OS" in
    linux)
        ;;
    darwin)
        ;;
    win)
        ./NetLwfUninstall.exe
        ./NetAdpUninstall.exe
        ./NetAdp6uninstall.exe
        ./NetFltuninstall.exe
        ./SUPUninstall.exe
        ;;
    *)
        ;;
    esac
}

__vbx_vakit_env()
{
    __vbx_env ${1}

    export VBOX_INSTALL_PATH=${MY_VBOX_PATH_OUT}
    export VBOX_VALIDATIONKIT_LOG_DEST=${VBOX_LOG_DEST}
    # Note: Logging groups + dest will be set via the regular VBOX_LOG_FLAGS / VBOX_LOG_DEST env vars.
    export VBOX_VALIDATIONKIT_TESTDRIVER_DEFAULT_OPTS="-d --vbox-session-type gui"
    # Always use tests from trunk.
    export VBOX_VALIDATIONKIT_TESTS_PATH=${MY_VBOX_PATH_HOME}/trunk/src/VBox/ValidationKit/tests

    if [ -z "$VBOX_VALIDATIONKIT_PATH" ]; then
        VBOX_VALIDATIONKIT_PATH=${HOME}/validationkit
    fi
    if [ ! -d "$VBOX_VALIDATIONKIT_PATH" ]; then
        echo "Error: Validation Kit root directory '$VBOX_VALIDATIONKIT_PATH' does not exist."
        exit 1
    fi
    export VBOX_VALIDATIONKIT_PATH

    export TESTBOX_PATH_SCRATCH=${VBOX_VALIDATIONKIT_PATH}/scratch
    export TESTBOX_PATH_RESOURCES=${VBOX_VALIDATIONKIT_PATH}/res
    export TESTBOX_PATH_USER_HOME=$TESTBOX_PATH_SCRATCH/VBoxUserHome
    if [ ! -d "$TESTBOX_PATH_RESOURCES" ]; then
        echo "Error: Validation Kit resources directory '$TESTBOX_PATH_RESOURCES' does not exist."
        exit 1
    fi

    # The testdriver framework uses this for determining the VBox installation location.
    export VBOX_TD_DEV_TREE=${VBOX_INSTALL_PATH}

    export KBUILD_TYPE=${MY_VBOX_TYPE}

    echo "Validation Kit root at     : $VBOX_VALIDATIONKIT_PATH"
    echo "Validation Kit resources at: $TESTBOX_PATH_RESOURCES"
    echo "Validation Kit scratch at  : $TESTBOX_PATH_SCRATCH"
    echo "Validation Kit user home at: $TESTBOX_PATH_USER_HOME"

    # Explicitly (re-)set the VBox user home, so that other stuff also finds the new (Validation Kit) home.
    export VBOX_USER_HOME=${TESTBOX_PATH_USER_HOME}

    # Override the default "gdb" to let the test driver debugger logic do its thing.
    export VBOX_ASSERT=disabled

    export COMPUTERNAME=127.0.0.1
}

__vbx_dbg()
{
    if [ "$MY_VBOX_TARGET_OS" = "linux" ]; then
        MY_VBOX_DEBUG_CMD="gdb -ex run --args"
    else
        MY_VBOX_DEBUG_CMD="lldb --"
    fi

    cd ${MY_VBOX_PATH_OUT}
    if [ "$2" = "restore" ]; then
        ./VBoxManage snapshot "$1" restorecurrent
        if [ $? -ne 0 ]; then
            return 1
        fi
    fi

    ${MY_VBOX_DEBUG_CMD} ./${MY_VBOX_VM_FRONTEND} --startvm "$1"
    return $?
}

#!/bin/sh

__my_check_root()
{
    if [ $(id -u) -ne 0 ]; then
        return 1
    fi

    return 0
}

__my_check_root_exit()
{
    __my_check_root
    if [ $? -ne 0 ]; then
        echo "This script must be run as root. Exiting."
        exit 1
    fi
}

# $1: Directory to search in
# $2: String to search for
# $3: Search options (grep)
__my_ffind()
{
    find ${1} -type f -exec grep --color=auto -n -H ${3} "$2" {} \;
}

rescue_mount()
{
    MY_MOUNT_POINT=/mnt/rescue

    mkdir -p ${MY_MOUNT_POINT}
    mount /dev/${1} ${MY_MOUNT_POINT}
    for dir in /dev /dev/pts /proc /sys /run; do sudo mount --bind $dir ${MY_MOUNT_POINT}/$dir; done
    sudo cp /proc/mounts ${MY_MOUNT_POINT}/etc/mtab
    mount -o bind /etc/resolv.conf ${MY_MOUNT_POINT}/etc/resolv.conf
    chroot ${MY_MOUNT_POINT} /bin/bash
}

#
# Renames a set of files with same file extension to another
# file extension: rename JPG jpg
#
files_rename_ext()
{
    for file in *.${1}
        do
            mv -v $file ${file%.*}.${2}
        # Another way: mv $file `echo $file | sed 's/\(.*\.\)html/\1php/'`
        # And another: mv $file `basename $file htm` html"
        done
}

#
# Returns the total size of a specific file / wildcard in the current directory.
#
files_get_size()
{
    find . -iname "$1" -print0 | du --files0-from=- -hc | tail -n1
}

pdf_compress()
{
    MY_TEMP_FILE=$(mktemp /tmp/pdf-compress.XXXXXX)
    pdf2ps ${1} ${MY_TEMP_FILE}
    ps2pdf -dPDFSETTINGS=/screen -dDownsampleColorImages=true -dColorImageResolution=200 -dColorImageDownsampleType=/Bicubic ${MY_TEMP_FILE} ${1}
    rm ${MY_TEMP_FILE}
}

handbrake_transcode_file()
{
    if [ -z "$1" ] ; then
        echo "No file to transcode specified"
        return
    else
        MY_TRANSCODE_FILE="$1"
    fi

    if [ -z "$2" ] ; then
        MY_PROFILE_NAME="op3"
    else
        MY_PROFILE_NAME="$2"
    fi

    MY_PROFILE_FILE="$HOME/.dotfiles/bin/handbrake/profiles/$MY_PROFILE_NAME.json"

    ( cd $(dirname "$MY_TRANSCODE_FILE") && \
      HandBrakeCLI --preset-import-file "$MY_PROFILE_FILE" -i "$MY_TRANSCODE_FILE" -o transcoded_$(basename "$MY_TRANSCODE_FILE") --preset="$MY_PROFILE_NAME" )
}

handbrake_transcode_dir()
{
    if [ $# -lt 1 ]; then
        MY_TRANSCODE_PATH="."
    else
        MY_TRANSCODE_PATH="$1"
        shift
    fi

    MY_PROFILE_FILE=""
    MY_DO_REPLACE=""

    while [ $# != 0 ]; do
        CUR_PARM="$1"
        shift
        case "$CUR_PARM" in
            --profile)
                MY_PROFILE_FILE="$1"
                shift
                ;;
            --replace)
                MY_DO_REPLACE=1
                ;;
            *)
                ${ECHO} "ERROR: Unknown option \"$CUR_PARM\"" 1>&2
                ${ECHO} "" 1>&2
                ;;
        esac
    done

    which ffprobe &> /dev/null || ( echo "ffprobe not installed. Aborting." >&2; return 2 )
    which HandBrakeCLI &> /dev/null || ( echo "HandBrakeCLI not installed. Aborting." >&2; return 2 )

    if [ -z "$MY_PROFILE_FILE" ]; then 
        echo "No profile specified. Use --profile <path/to/profile.json> to set."
        return 2
    fi

    MY_LOCK_FILE=/tmp/handbrake_transcode_dir.lock
    MY_TRANSCODE_LIST=/tmp/handbrake_transcode_dir.list

    if [ -f "$MY_LOCK_FILE" ]; then
        echo "Transcoding job already running, exiting."
        return 2
    fi
    touch ${MY_LOCK_FILE}

    MY_FILENAME_EXT=".*\.\(avi\|wmv\|mpg\|mp4\|mkv\)"
    MY_FILENAME_PREFIX_ORIGINAL=original_
    MY_FILENAME_PREFIX_TRANSCODED=transcoded_

    MY_PROFILE_NAME=$(basename -s .json "$MY_PROFILE_FILE")

    echo "[$(date)] Started: $MY_TRANSCODE_PATH (using $MY_PROFILE_FILE)"

    find "$MY_TRANSCODE_PATH" -type f -iregex "$MY_FILENAME_EXT" \( ! -iname "$MY_FILENAME_PREFIX_TRANSCODED*" -a ! -iname "$MY_FILENAME_PREFIX_ORIGINAL*" \) -print0 > ${MY_TRANSCODE_LIST}

    while IFS= read -r -d $'\0' MY_FILENAME <&3; do
        MY_FILENAME_PATH=$(dirname "$MY_FILENAME")
        MY_FILENAME_NAME=$(basename "$MY_FILENAME")
        MY_FILENAME_SRC=${MY_FILENAME_PATH}/${MY_FILENAME_NAME}
        MY_FILENAME_DST=${MY_FILENAME_PATH}/${MY_FILENAME_PREFIX_TRANSCODED}${MY_FILENAME_NAME}
        MY_FILENAME_LOG=${MY_FILENAME_PATH}/${MY_FILENAME_PREFIX_TRANSCODED}${MY_FILENAME_NAME}.log

        echo "[$(date)] Handling: $MY_FILENAME_SRC"

        MY_SRC_CODEC_TYPE=$(ffprobe -v error -hide_banner -of default=noprint_wrappers=1:nokey=1 -select_streams v:0 -show_entries stream=codec_name "$MY_FILENAME_SRC")
        if [ $? -ne 0 ]; then
            echo "[$(date)] Unable to determine codec type, skipping: $MY_FILENAME_SRC"
            continue
        fi
        if [ "$MY_SRC_CODEC_TYPE" == "h264" ]; then
            echo "[$(date)] Already transcoded, skipping: $MY_FILENAME_SRC"
            continue
        fi
        echo "[$(date)] Transcoding started: $MY_FILENAME_SRC ($MY_SRC_CODEC_TYPE) -> $MY_FILENAME_DST"
        HandBrakeCLI --preset-import-file "$MY_PROFILE_FILE" -i "$MY_FILENAME_SRC" -o "$MY_FILENAME_DST" --preset="$MY_PROFILE_NAME" 2>&1 | tee "$MY_FILENAME_LOG"
        if [ $? -ne 0 ]; then
            echo "[$(date)] Error transcoding file: $MY_FILENAME_SRC"
            rm "$MY_FILENAME_DST" > /dev/null 2>&1 # Delete partially encoded file again.
            # Keep the log file.
        else
            echo "[$(date)] Transcoding successful: $MY_FILENAME_SRC"
            rm "$MY_FILENAME_LOG" # Remove the log file on success.
            if [ -n "$MY_DO_REPLACE" ]; then
                echo "[$(date)] Replacing $MY_FILENAME_SRC"
                mv "$MY_FILENAME_SRC" "$MY_FILENAME_PATH/$MY_FILENAME_PREFIX_ORIGINAL$MY_FILENAME_NAME" && mv "$MY_FILENAME_DST" "$MY_FILENAME_SRC"
            fi
        fi
    done 3< ${MY_TRANSCODE_LIST};

    echo "[$(date)] Ended"

    rm ${MY_TRANSCODE_LIST}
    rm ${MY_LOCK_FILE}
}
